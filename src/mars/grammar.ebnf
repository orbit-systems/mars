param_ident = "self" | "^" {reference_qualifier} "self" | ["def"] ident;
param = param_ident {"," param_ident} [","] ":" expr;
param_list = param {"," param} [","];
fun_sign = ["inline"] "fun" ident ["[" param_list "]"] "(" param_list ")" [":" expr];
fun_decl = fun_sign block;

decl_list = decl_specifier ident {"," [decl_specifier] ident} [","];
expr_list = expr {"," expr} [","];
decl_specifier = ("var" | "let" | "def");
entity_decl = decl_list ":" expr_list ["=" expr_list] ";";

block = "{" {stmt} [expr] "}";
def_block = "def" block;

bracing_expr = 
    | block
    | def_block
    | if_expr
    | switch_expr
    | while_expr
    | loop_expr
    ;

atomic_expr = 
    | literal
    | ident
    | bracing_expr
    | "(" expr {"," expr} [","] ")"                  (* paren/tuple *)
    | atomic_expr "." ident                 
    | atomic_expr "::" ident
    | atomic_expr "::" "[" expr {"," expr} [","] "]" (* generic *)
    | atomic_expr "[" expr "]"
    | atomic_expr "(" expr {"," expr} [","] ")"
    ;

unary_expr = ;

non_bracing_expr = 
    | 
    ;

stmt = 
    | type_decl
    | entity_decl
    | fun_decl
    | "defer" stmt
    | ";"
    | bracing_expr [";"]
    | non_bracing_expr ";"
    ;

expr = 
    | bracing_expr
    | non_bracing_expr
    ;

reference_qualifier = 
    | "const"
    | "static"
    | "noalias"
    | "allowzero"
    | "alignas" "(" expr ")"
    | "offsetas" "(" expr ")"
    ;

sentinel = ":" expr;

ty_expr = 
    | ident
    | "^"                     {reference_qualifier} ty_expr    (* pointer *)
    | "[" "^"  [sentinel] "]" {reference_qualifier} ty_expr    (* slice pointer *)
    | "["      [sentinel] "]" {reference_qualifier} ty_expr    (* slice *)
    | "[" expr [sentinel] "]" ty_expr                          (* array *)
    | "fun" ["[" param_list "]"] "(" param_list ")" [":" expr] (* function type *)
    ;

field_ty = expr | type_decl;
field = 
    | ident {"," ident} [","] ":" field_ty
    | "enum"
    ;
field_list = field {"," field} [","];

type_decl = 
    | struct_decl
    | union_decl
    | enum_decl
    ;

struct_decl = 
    "packed" "struct" [ident] "{"
        [field_list]

        {fun_decl | impl_block | type_decl | entity_decl}
    "}";

union_decl = 
    "union" [["inline"] "enum" ["(" expr ")"]] [ident] "{"
        [["inline"] "common" "{" [field_list] "}"]

        [field_list]

        ["common" "{" [field_list] "}"]

        {fun_decl | impl_block | type_decl | entity_decl}
    "}";

enum_decl = 
    "enum" ["(" expr ")"] [ident] "{"
        [ident ["=" expr] {"," ident ["=" expr]} [","]]

        {fun_decl | impl_block | type_decl | entity_decl}
    "}";

interface_decl = ;
